{"version":3,"sources":["components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts-actions.js","redux/contacts-operations.js","redux/contacts-selectors.js","redux/contacts-reducer.js","redux/contacts-store.js","components/Container/Container.js","components/Section/Section.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactForm.container.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/Filter/Filter.js","components/Filter/Filter.container.js","components/App/App.js","components/App/App.container.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","items","dispatch","post","then","data","catch","error","id","delete","get","getFilter","state","contacts","filter","getAllContacts","getLoading","loading","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","name","includes","getExistingContactsName","length","map","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactReducer","devTools","process","Container","children","className","styles","Section","title","ContactForm","number","handleChange","event","currentTarget","value","setState","generateId","shortid","generate","handleFormFill","reviewContactsNames","props","existingContactsName","emptyForm","shortContactName","alert","onSubmit","reset","handleSubmit","preventDefault","this","form","htmlFor","nameInputId","formLabel","type","onChange","formInput","numberInputId","btn","Component","connect","contactsSelectors","contactsOperations","ContactListItem","contact","onDeleteContact","item","onClick","ContactList","deleteContact","list","key","Filter","input","target","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02843807.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1De6D\",\"btn\":\"ContactListItem_btn__2Hw6G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3bKjm\",\"input\":\"Filter_input__1FOLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1l0qX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2JtP7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__9jqcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__r0Zp5\",\"formLabel\":\"ContactForm_formLabel__2L75A\",\"formInput\":\"ContactForm_formInput__1T37w\",\"btn\":\"ContactForm_btn__3DUf0\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSucces',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess = createAction('contacts/addContactsSucces');\r\nexport const addContactsError = createAction('contacts/addContactsError');\r\n\r\nexport const deleteContactsRequest = createAction(\r\n  'contacts/deleteContactsRequest',\r\n);\r\nexport const deleteContactsSuccess = createAction(\r\n  'contacts/deleteContactsSucces',\r\n);\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = items => dispatch => {\r\n  dispatch(addContactsRequest());\r\n  axios\r\n    .post('/contacts', items)\r\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n    .catch(error => dispatch(addContactsError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactsSuccess(id)))\r\n    .catch(error => dispatch(deleteContactsError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizeFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizeFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst getExistingContactsName = createSelector([getAllContacts], contacts => {\r\n  if (contacts.length >= 0) {\r\n    return contacts.map(({ name }) => name.toLowerCase());\r\n  }\r\n});\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n  getExistingContactsName,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactsSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContactsSuccess]: () => false,\r\n  [deleteContactsError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({ items, filter, loading, error });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contacts-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <div className={styles.Container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2 className={styles.title}>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\nimport shortid from 'shortid';\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    existingContactsName: PropTypes.array.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  generateId = () => {\n    shortid.generate();\n  };\n\n  handleFormFill = () => {\n    const { name, number } = this.state;\n    const { existingContactsName } = this.props;\n    const reviewContactsNames = existingContactsName.includes(\n      name.toLowerCase(),\n    );\n    const emptyForm = !name || !number;\n    const shortContactName = name.length < 3;\n\n    if (reviewContactsNames) {\n      return alert(`${name} is already in contacts`);\n    }\n    if (emptyForm) {\n      return alert('Fill the form');\n    }\n    if (shortContactName) {\n      return alert('Name should have more than 3 letters');\n    }\n\n    this.props.onSubmit({\n      name,\n      number,\n      id: this.generateId(),\n    });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.handleFormFill();\n    this.reset();\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label htmlFor={this.nameInputId} className={styles.formLabel}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            className={styles.formInput}\n          />\n        </label>\n        <br />\n        <label htmlFor={this.numberInputId} className={styles.formLabel}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            className={styles.formInput}\n          />\n        </label>\n        <button type=\"submit\" className={styles.btn}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { connect } from 'react-redux';\r\nimport ContactForm from './ContactForm';\r\nimport { contactsOperations, contactsSelectors } from '../../redux';\r\n\r\nconst mapStateToProps = state => ({\r\n  existingContactsName: contactsSelectors.getExistingContactsName(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(contactsOperations.addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ contact, onDeleteContact }) => {\n  const { name, number } = contact;\n\n  return (\n    <li className={styles.item}>\n      <span>{name}:</span>\n      <span> {number}</span>\n      <button type=\"button\" onClick={onDeleteContact} className={styles.btn}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactlistItem from '../ContactListItem';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, ...contact }) => {\n        return (\n          <ContactlistItem\n            key={id}\n            contact={contact}\n            onDeleteContact={() => deleteContact(id)}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\nexport default connect(mapStateProps, mapDispatchProps)(ContactList);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3 className={styles.title}>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n      className={styles.input}\n    />\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from '../../redux';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Container from '../Container';\r\nimport Section from '../Section';\r\nimport ContactForm from '../ContactForm';\r\nimport ContactList from '../ContactList';\r\nimport Filter from '../Filter';\r\n\r\nclass App extends Component {\r\n  static propTypes = {\r\n    fetchContacts: PropTypes.func.isRequired,\r\n    isLoadingContacts: PropTypes.bool.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Section title=\"Phonebook\">\r\n          {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n          <ContactForm />\r\n        </Section>\r\n        <Section title=\"Contacts\">\r\n          <Filter />\r\n          <ContactList />\r\n        </Section>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport App from './App';\r\nimport { contactsOperations, contactsSelectors } from '../../redux';\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux';\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}